#!/bin/bash

# If a command fails then the deploy stops
set -e

SITE_DIRECTORY_PATH=/Users/brianpfeil/Dropbox/wyattpfeil-personal-website
SITE_CONFIG_FILE_PATH="${SITE_DIRECTORY_PATH}/config.yaml"
POST_DIRECTORY_PATH="${SITE_DIRECTORY_PATH}/content/post"

display_usage() {
    echo -e "site (personal website) tool\n"
    echo -e "USAGE"
    echo -e "\t$ site [COMMAND]\n"
    echo -e "COMMANDS"
    echo -e "\tsite publish [-m commit_message]"
    echo -e "\tsite post [-t title]"
}

# if less than two arguments supplied, display usage
if [  $# -le 0 ]
then
    display_usage
    exit 1
fi

# check whether user had supplied -h or --help . If yes display usage
if [[ ( $# == "--help") ||  $# == "-h" ]]
then
    display_usage
    exit 0
fi

PARAMS=""

while (( "$#" )); do
  case "$1" in
    -a|--my-boolean-flag)
      MY_FLAG=0
      shift
      ;;
    -m|--message)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        MESSAGE=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -t|--title)
      if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
        TITLE=$2
        shift 2
      else
        echo "Error: Argument for $1 is missing" >&2
        exit 1
      fi
      ;;
    -*|--*=) # unsupported flags
      echo "Error: Unsupported flag $1" >&2
      exit 1
      ;;
    *) # preserve positional arguments
      PARAMS="$PARAMS $1"
      shift
      ;;
  esac
done
# set positional arguments in their proper place
eval set -- "$PARAMS"

CMD="${1}"

# echo "${CMD}"
# echo "MY_FLAG=${MY_FLAG}"
# echo "MY_FLAG_ARG=${MY_FLAG_ARG}"
# echo "MESSAGE=${MESSAGE}"
# echo "TITLE=${TITLE}"

publish() {
	printf "\033[0;32mDeploying updates to GitHub...\033[0m\n"

  MESSAGE="${MESSAGE:-updates}"

	pushd "${SITE_DIRECTORY_PATH}"

	# Build the project.
	./bin/hugo # if using a theme, replace with `hugo -t <YOURTHEME>`

	# generate service worker
	# see https://developers.google.com/web/tools/workbox/guides/generate-service-worker/cli
	#workbox generateSW workbox-config.js

	# Go To Public folder
	pushd public

	# Add changes to git.
	git add .

	# Commit changes.
	msg="rebuilding site $(date)"
	if [ -n "$*" ]; then
		msg="$*"
	fi
	git commit -a -m "$msg"

	# Push source and build repos.
	git push origin main

	popd

  # top-level repo
  git add .
  git commit -a -m "${MESSAGE}"
  git push origin master

	popd
}

slugify() {
  echo "$1" | iconv -t ascii//TRANSLIT | sed -E 's/[~\^]+//g' | sed -E 's/[^a-zA-Z0-9]+/-/g' | sed -E 's/^-+\|-+$//g' | sed -E 's/^-+//g' | sed -E 's/-+$//g' | tr A-Z a-z
}

post() {
  pushd "${SITE_DIRECTORY_PATH}"
  local title="$1"
  local slug=$(slugify "${title}")
  local post_file_directory_path="${POST_DIRECTORY_PATH}/${slug}"
  local post_file_path="${post_file_directory_path}/index.md"

  if [ -d "${post_file_directory_path}" ]
  then
      echo "post directory \"${post_file_directory_path}\" exists.  please choose a different post name"
      exit 1
  else
    mkdir -p "${post_file_directory_path}"
    mkdir -p "${post_file_directory_path}/images"
  fi

  hugo new "${post_file_path}" --config "${SITE_CONFIG_FILE_PATH}"

  echo -e "\n\npost file created at ${post_file_path}\n\n"
  popd
}


case "${CMD}" in
publish)
	publish
	;;
post)
  post "${TITLE}"
  ;;
*) # preserve positional arguments
	echo -e "unsupported command \"${CMD}\"\n\n"
	display_usage
    exit 1
	;;
esac

